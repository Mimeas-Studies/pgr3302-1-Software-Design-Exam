@startuml
'https://plantuml.com/

'------interfaces & abstracts-------

interface ISourceLoader {
    ..Methods..
    GetTextIterator(path: string): IEnumerator<string>
    GetAvailableTexts(): List<string>
}

interface IStoreManager {
    ..Methods..
    + SaveResult(result: AnalyzerResult): void
    + GetScanList(): List<(string, DateTime)>
    + GetScan(sourceName: string, scanTime: DateTime): AnalyzerResult?
    + GetAll(): List<AnalyzerResult>
    + GetWithSource(name: string): List<AnalyzerResult>
}

'-----------classes-----------------

class AnalyzerResult {
    ..Fields..
    + SourceName: string
    + ScanTime: DateTime
    + TotalWordCount: int
    + TotalCharCount: int
    + LongestWord: string
    + WordHeatMap: Dictionary<string,int>
    + CharHeatMap: Dictionary<string,int>
    ..Methods..
    + ToString(): string
}

class MainManager {
    ..Fields..
    - sourceManager: SourceManager
    - analyzerManager: AnalyzerManager
    - storage: IStoreManager
    ..Methods..
    + Main(args: string[]): void
    - NewScan(): AnalyzerResult
    - SaveResult(scan: AnalyzerResult): void
    - DeleteResult(result): void
    - GetSavedScans(): List<AnalyzerResult>
}

class Ui {
    ..Methods..
    + GetInput(message: string): Input
    + Display(message: string): void
}

class UiManager {
    ..Methods..
    + GetAction(alternatives: List<string>): int
    + ShowResult(result: AnalyzerResult): void
    + ShowResultList(list: List<Result>): void
}

class SourceManager {
    ..Fields..
    - SourceList: Dictionary<string, ISourceLoader>
    ..Methods..
    + GetText(source: string): IEnumerator<string>
    + GetAvailableSources(): List<string> 
}

class AnalyzerManager {
    ..Fields..
    - threads: int
    ..Methods..
    + AnalyzeSource(source: IEnumerator<string>): AnalyzerResult
}

class AnalyzerThread {
    ..Fields..
    - source: IEnumerator<string>
    - loadedText: Queue<string>
    ..Methods..
    + Start(source: IEnumerator<string>)): AnalyzerResult
    - GetNextLine(): void
    - TotalWordCount(): void
    - TotalCharCount(): void
    - LongestWord(): void
    - WordHeatMap(): void
    - CharHeatMap(): void
}

class SqliteDb {
    ..Fields..
    - dbConnection: SqliteConnection
    ..Methods..
    + SqliteDb(): SqliteDb
    + SqliteDb(path: string) SqliteDb
    - ConnectionSetup(path: string): void
    - TableSetup(): void
    - DeserializeScan(reader: SqliteReader): AnalyzerResult
}

'-----------Relations------------

UiManager <-- MainManager
UiManager --> ISourceLoader
UiManager --> IStoreManager

Ui <-- UiManager

ISourceLoader <- MainManager
ISourceLoader  <|--  SourceManager

MainManager --> AnalyzerManager
AnalyzerManager --> AnalyzerThread

MainManager -> IStoreManager
IStoreManager <|-- SqliteDb

@enduml